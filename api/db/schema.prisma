datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "native"
  previewFeatures = ["selectRelationCount"]
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  username           String         @unique
  name               String?
  image              String?
  location           String?
  github             String?
  twitter            String?
  website            String?
  posts              Post[]
  comments           Comment[]
  followers          User[]         @relation("Follows", references: [id])
  following          User[]         @relation("Follows", references: [id])
  bookmarks          Bookmark[]
  notifications      Notification[] @relation("NotificationUser")
  followNotification Notification[] @relation("NotificationFollow")
  darkMode           Boolean        @default(true)
  defaultPostType    PostType       @default(update)
  createdAt          DateTime       @default(now())
}

model Post {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  type          PostType
  title         String?
  url           String?
  content       String?
  description   String?
  sharedPost    Post?          @relation("PostToPost", fields: [sharedPostId], references: [id])
  sharedPostId  String?
  shares        Post[]         @relation("PostToPost")
  private       Boolean        @default(false)
  comments      Comment[]
  bookmarkedBy  Bookmark[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum PostType {
  update
  snippet
  article
  link
  image
  video
  share
}

model Bookmark {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
}

model Comment {
  id        String    @id @default(cuid())
  comment   String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  parentId  String?
  parent    Comment?  @relation("Replies", fields: [parentId], references: [id])
  replies   Comment[] @relation("Replies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Notification {
  id         String           @id @default(cuid())
  user       User             @relation("NotificationUser", fields: [userId], references: [id])
  userId     String
  type       NotificationType
  count      Int
  read       Boolean          @default(false)
  post       Post?            @relation(fields: [postId], references: [id])
  postId     String?
  follower   User?            @relation("NotificationFollow", fields: [followerId], references: [id])
  followerId String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum NotificationType {
  follow
  comment
  share
}
